
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hzqnccsmejplilhmisgu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh6cW5jY3NtZWpwbGlsaG1pc2d1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0NjA4MzEsImV4cCI6MjA2MDAzNjgzMX0.ou3o4WiB7NDmU7Mj0kiwXYuf1OjFK_WxmwBGy2d_Dhs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type definition for server time response
export interface ServerTimeResponse {
  server_time: string;
  timezone: string;
  timestamp_utc: string;
  unix_timestamp: number;
}

// Helper function to get server time
export const getServerTime = async (): Promise<ServerTimeResponse> => {
  try {
    const { data, error } = await supabase.rpc('get_current_time');
    if (error) throw error;
    return data as unknown as ServerTimeResponse;
  } catch (error) {
    console.error('Error getting server time:', error);
    // Fallback to client time if server time fails
    return {
      server_time: new Date().toISOString(),
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      timestamp_utc: new Date().toISOString(),
      unix_timestamp: Math.floor(Date.now() / 1000)
    };
  }
};
