/*
 * Complete ESP32/ESP8266 OTA Update Example for PowerVerter Pro
 * This code demonstrates how to integrate OTA updates with Firebase
 */

#include <Firebase_ESP_Client.h>
#include <ArduinoJson.h>
#include <WiFiManager.h>
#include <WiFiClientSecure.h>
#include <HTTPUpdate.h>

// Pin definitions for load control
const int load1 = 12;
const int load2 = 14;
const int load3 = 27;
const int load4 = 26;
const int load5 = 25;
const int load6 = 33;
const int load7 = 32;

// WiFi Manager configuration
bool wm_nonblocking = false;
WiFiManager wm;

// Load variables
int load_1, load_2, load_3, load_4, load_5, load_6, load_7, load_8;

// Firebase includes
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

// Firebase configuration
#define API_KEY "AIzaSyCaJJ-2ExS5uGcH7jQ_9jwbHFIKLrj8J54"
#define DATABASE_URL "https://powerverter-pro-default-rtdb.firebaseio.com/"

// Define Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Variable to save USER UID
String uid;

FirebaseJson json;

// IMPORTANT: Change these paths to match your device ID
// Note: the device path uses a DOUBLE underscore prefix for OTA updates
String appPath = "/_3415fysgfy514514e5";
String devicePath = "/3415fysgfy514514e5";
String otaPath = "/__3415fysgfy514514e5"; // NEW: Path for OTA updates with double underscore

// Timer variables
unsigned long sendDataPrevMillis = 0, sendDataPrevMillis_2 = 0, lastOTACheck = 0;
unsigned long timerDelay = 10, timerDelay_2 = 100;

JsonDocument doc;

// Update progress callback for better monitoring
void updateCallback(size_t progress, size_t total) {
  int percentage = (progress / (total / 100));
  
  Serial.printf("OTA Update: %d%% (%d/%d bytes)\n", percentage, progress, total);
  
  // Update Firebase with progress every 5%
  static int lastReported = 0;
  if ((percentage % 5 == 0) && (percentage != lastReported)) {
    lastReported = percentage;
    
    if (Firebase.ready()) {
      FirebaseJson statusJson;
      statusJson.set("status", "downloading");
      statusJson.set("progress", percentage);
      statusJson.set("message", "Downloading firmware: " + String(percentage) + "%");
      Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
    }
  }
}

// Enhanced OTA update function for ESP32 with Supabase direct URL support
void checkForOTAUpdates() {
  if (!Firebase.ready()) {
    Serial.println("Firebase not ready, skipping OTA check");
    return;
  }
  
  Serial.println("Checking for firmware updates...");
  
  // Update status to checking - use otaPath with double underscore
  FirebaseJson statusJson;
  statusJson.set("status", "checking");
  statusJson.set("message", "Checking for firmware updates");
  Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
  
  // Check if update data exists - use otaPath with double underscore
  FirebaseJson updateJson;
  if (Firebase.RTDB.getJSON(&fbdo, otaPath + "/update", &updateJson)) {
    String updateData = updateJson.raw();
    if (updateData != "null" && updateData.length() > 10) {
      Serial.println("Found OTA update data: " + updateData);
      
      // Parse the update JSON
      DynamicJsonDocument updateDoc(1024);
      DeserializationError error = deserializeJson(updateDoc, updateData);
      
      if (error) {
        Serial.print("JSON parsing failed: ");
        Serial.println(error.c_str());
        
        statusJson.set("status", "failed");
        statusJson.set("error", String("JSON parse error: ") + error.c_str());
        statusJson.set("completed", true);
        Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
        return;
      }
      
      // Try to use direct URL first, then short_url, then url as fallbacks
      String firmwareUrl = "";
      
      if (updateDoc.containsKey("url")) {
        firmwareUrl = updateDoc["url"].as<String>();
        Serial.println("Using direct Supabase URL: " + firmwareUrl);
      } else if (updateDoc.containsKey("short_url")) {
        firmwareUrl = updateDoc["short_url"].as<String>();
        Serial.println("Using short URL: " + firmwareUrl);
      }
      
      if (firmwareUrl.length() > 5) {
        Serial.println("Starting OTA update from: " + firmwareUrl);
        
        // Send update status - use otaPath with double underscore
        statusJson.set("status", "downloading");
        statusJson.set("progress", 0);
        statusJson.set("message", "Started firmware download");
        Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
        
        // IMPORTANT NEW CODE: Remove the update path immediately after download starts
        // This prevents update loops where the device keeps trying to update
        FirebaseData fbdoRemove;
        if (Firebase.RTDB.deleteNode(&fbdoRemove, otaPath + "/update")) {
          Serial.println("Successfully removed update path to prevent update loops");
        } else {
          Serial.println("Failed to remove update path: " + fbdoRemove.errorReason());
        }
        
        // Create WiFi client with more timeout for larger files
        WiFiClientSecure client;
        client.setInsecure(); // Skip certificate verification
        client.setTimeout(60); // Increase timeout to 60 seconds
        
        // Configure HTTP update with callback
        httpUpdate.setLedPin(LED_BUILTIN, LOW);
        httpUpdate.onProgress(updateCallback);
        
        // Pre-check the URL with HEAD request to verify it has Content-Length header
        bool contentLengthOk = false;
        HTTPClient http;
        http.begin(client, firmwareUrl);
        http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
        
        int httpCode = http.sendRequest("HEAD");
        if (httpCode > 0) {
          if (httpCode == HTTP_CODE_OK) {
            if (http.hasHeader("Content-Length")) {
              String contentLength = http.header("Content-Length");
              Serial.println("Content-Length: " + contentLength + " bytes");
              contentLengthOk = true;
            } else {
              Serial.println("Warning: Content-Length header missing, but attempting update anyway");
            }
          }
        } else {
          Serial.printf("HEAD request failed, error: %s\n", http.errorToString(httpCode).c_str());
        }
        http.end();
        
        // Debug information before update
        Serial.println("HTTP Update configured, starting download...");
        Serial.print("Free heap: ");
        Serial.println(ESP.getFreeHeap());
        
        // Try to update
        Serial.println("Starting HTTP update...");
        
        // Use an increased buffer size for better performance
        t_httpUpdate_return ret = httpUpdate.update(client, firmwareUrl);
        
        // Check result
        switch (ret) {
          case HTTP_UPDATE_FAILED:
            Serial.printf("HTTP_UPDATE_FAILED Error (%d): %s\n", 
              httpUpdate.getLastError(),
              httpUpdate.getLastErrorString().c_str());
              
            // Report error - use otaPath with double underscore
            statusJson.set("status", "failed");
            statusJson.set("error", String("Update error (") + httpUpdate.getLastError() + "): " + httpUpdate.getLastErrorString().c_str());
            statusJson.set("completed", true);
            Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
            
            // If error is Content-Length related, try alternative approach
            if (httpUpdate.getLastError() == -101) {  // Server did not report size
              Serial.println("Server did not report Content-Length, consider using a service that supports HEAD requests");
            }
            break;
            
          case HTTP_UPDATE_NO_UPDATES:
            Serial.println("HTTP_UPDATE_NO_UPDATES");
            
            // Report no updates - use otaPath with double underscore
            statusJson.set("status", "no_update");
            statusJson.set("message", "No updates available");
            statusJson.set("completed", true);
            Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
            break;
            
          case HTTP_UPDATE_OK:
            Serial.println("HTTP_UPDATE_OK");
            
            // Report success (device will restart after this) - use otaPath with double underscore
            statusJson.set("status", "success");
            statusJson.set("message", "Update successful, restarting...");
            statusJson.set("progress", 100);
            statusJson.set("completed", true);
            Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
            break;
        }
      } else {
        Serial.println("Invalid firmware URL");
        statusJson.set("status", "failed");
        statusJson.set("error", "Invalid firmware URL");
        statusJson.set("completed", true);
        Firebase.RTDB.setJSON(&fbdo, otaPath + "/update_status", &statusJson);
      }
    } else {
      // No update data available
      Serial.println("No firmware update data available");
    }
  } else {
    Serial.println("Failed to get update data from Firebase");
  }
}

void saveParamCallback(){  
  Serial.println("[CALLBACK] saveParamCallback fired");
}

void setup(){
  Serial.begin(115200);
  Serial.println("PowerVerter Pro - Starting up");

  // Setup WiFiManager
  if(wm_nonblocking) wm.setConfigPortalBlocking(false);
  wm.setSaveParamsCallback(saveParamCallback);
  std::vector<const char *> menu = {"wifi","info","param","sep","restart","exit"};
  wm.setMenu(menu);
  wm.setClass("invert");
  wm.setBreakAfterConfig(true);
  wm.setWiFiAutoReconnect(true);
  wm.setRestorePersistent(true);
  wm.setConfigPortalTimeout(120); 
  wm.setConnectTimeout(5);
  wm.setConnectRetries(3);
  
  // Connect to WiFi
  bool res;
  res = wm.autoConnect("PVT DEVICE",""); 
  if(!res) {
    Serial.println("Failed to connect or hit timeout");
    // ESP.restart();
  } 
  else {  
    Serial.println("PVT Connected successfully");
  }
  
  // Configure output pins
  pinMode(load1, OUTPUT);
  pinMode(load2, OUTPUT);
  pinMode(load3, OUTPUT);
  pinMode(load4, OUTPUT);
  pinMode(load5, OUTPUT);
  pinMode(load6, OUTPUT);
  pinMode(load7, OUTPUT);

  // Default to all loads off
  digitalWrite(load1, HIGH);
  digitalWrite(load2, HIGH);
  digitalWrite(load3, HIGH);
  digitalWrite(load4, HIGH);
  digitalWrite(load5, HIGH);
  digitalWrite(load6, HIGH);
  digitalWrite(load7, HIGH);

  // Configure Firebase
  config.api_key = API_KEY;
  auth.user.email = "your-email@example.com"; // Replace with your email
  auth.user.password = "your-password";        // Replace with your password
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);
  config.token_status_callback = tokenStatusCallback;
  config.max_token_generation_retry = 3;

  // Initialize Firebase
  Firebase.begin(&config, &auth);

  // Getting the user UID
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);
  
  // Send initial status
  FirebaseJson statusJson;
  statusJson.set("status", "online");
  statusJson.set("message", "Device started successfully");
  statusJson.set("version", "1.0.0");
  Firebase.RTDB.setJSON(&fbdo, devicePath + "/status", &statusJson);
  
  // Check for OTA updates on startup
  checkForOTAUpdates();
}

void loop(){
  // WiFi manager process if non-blocking
  if(wm_nonblocking) wm.process();

  // Check if WiFi is connected
  if(WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected, attempting to reconnect");
    WiFi.reconnect();
    delay(1000);
  }
  
  // Send sensor data to Firebase
  if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();
    
    Serial.println("Sending to cloud..");
    // Generate sensor data
    String values = String(random(208,230))+","+String(random(10,20))+","+String(random(2000,4000))+","+String(random(1,10))+","+String(random(47,50));
    values = values +","+"0.6"+","+"1"+","+"1"+","+"24"+","+"5"+","+String(random(20,25))+","+String(random(22,25))+","+String(random(22,25))+","+String(random(22,25))+","+String(random(2,10))+","+ String(random(60,90))+","+String(random(40,70))+","+"0"+","+"0"+","+"0"+ ","+ String(random (0,100000)) + "," + "0";
    
    // Send data
    json.set("data", values);
    Serial.printf("Set json... %s\n", Firebase.RTDB.setJSON(&fbdo, devicePath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());
  }

  // Read control commands from Firebase
  if (millis() - sendDataPrevMillis_2 > timerDelay_2 || sendDataPrevMillis_2 == 0){
    sendDataPrevMillis_2 = millis();

    String appData;
    FirebaseJson jVal;
    Firebase.RTDB.getJSON(&fbdo, appPath, &jVal);
    appData = jVal.raw();
    Serial.println(appData);
    DeserializationError error = deserializeJson(doc, appData);

    // Check if parsing succeeds
    if (error) {
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
      return;
    }

    // Get control values
    load_1 = doc["load_1"];
    load_2 = doc["load_2"];
    load_3 = doc["load_3"];
    load_4 = doc["load_4"];
    load_5 = doc["load_5"];
    load_6 = doc["load_6"];
    load_7 = doc["load_7"];

    // Apply control values
    load_1 == 0? digitalWrite(load1, LOW) : digitalWrite(load1, HIGH);
    load_2 == 0? digitalWrite(load2, LOW) : digitalWrite(load2, HIGH);
    load_3 == 0? digitalWrite(load3, LOW) : digitalWrite(load3, HIGH);
    load_4 == 0? digitalWrite(load4, LOW) : digitalWrite(load4, HIGH);
    load_5 == 0? digitalWrite(load5, LOW) : digitalWrite(load5, HIGH);
    load_6 == 0? digitalWrite(load6, LOW) : digitalWrite(load6, HIGH);  
  }
  
  // Check for OTA updates every minute
  if (millis() - lastOTACheck > 60000) { // 60000 ms = 1 minute
    lastOTACheck = millis();
    checkForOTAUpdates();
  }
}
